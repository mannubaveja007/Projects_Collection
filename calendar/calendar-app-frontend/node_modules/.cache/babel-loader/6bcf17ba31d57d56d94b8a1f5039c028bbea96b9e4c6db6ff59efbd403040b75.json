{"ast":null,"code":"var _jsxFileName = \"D:\\\\intern\\\\calendar\\\\calendar-app-frontend\\\\src\\\\components\\\\calendarUI.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Calendar from 'react-calendar'; // Calendar component\nimport 'react-calendar/dist/Calendar.css'; // Calendar styles\nimport EventForm from './EventForm'; // EventForm component to create/edit events\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CalendarUI = ({\n  events,\n  onEventSave\n}) => {\n  _s();\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [showEventForm, setShowEventForm] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState(null);\n\n  // Handle date change on calendar\n  const handleDateChange = date => {\n    setSelectedDate(date);\n    setSelectedEvent(null); // Clear the selected event when date changes\n    setShowEventForm(true); // Show the event form when a date is selected\n  };\n\n  // Get events for selected date\n  const getEventsForSelectedDate = date => {\n    return events.filter(event => new Date(event.date).toDateString() === new Date(date).toDateString());\n  };\n\n  // Handle saving the event\n  const handleSaveEvent = eventData => {\n    onEventSave(eventData); // Save event data through parent function\n    setShowEventForm(false); // Close form after saving\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar-ui\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Event Calendar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Calendar, {\n      onChange: handleDateChange // Update selected date\n      ,\n      value: selectedDate // Set the selected date\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"event-list\",\n      children: selectedDate && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Events for \", selectedDate.toDateString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: getEventsForSelectedDate(selectedDate).map(event => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: event.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: event.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: event.time\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 19\n            }, this)]\n          }, event.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), showEventForm && /*#__PURE__*/_jsxDEV(EventForm, {\n      event: selectedEvent // Pass selected event (if editing)\n      ,\n      onSave: handleSaveEvent // Handle save event\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(CalendarUI, \"Sh4zq0yhhkhRWLygSBKuLzewf4U=\");\n_c = CalendarUI;\nexport default CalendarUI;\nvar _c;\n$RefreshReg$(_c, \"CalendarUI\");","map":{"version":3,"names":["React","useState","Calendar","EventForm","jsxDEV","_jsxDEV","Fragment","_Fragment","CalendarUI","events","onEventSave","_s","selectedDate","setSelectedDate","showEventForm","setShowEventForm","selectedEvent","setSelectedEvent","handleDateChange","date","getEventsForSelectedDate","filter","event","Date","toDateString","handleSaveEvent","eventData","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","value","map","title","description","time","id","onSave","_c","$RefreshReg$"],"sources":["D:/intern/calendar/calendar-app-frontend/src/components/calendarUI.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Calendar from 'react-calendar';  // Calendar component\r\nimport 'react-calendar/dist/Calendar.css';  // Calendar styles\r\nimport EventForm from './EventForm';  // EventForm component to create/edit events\r\n\r\nconst CalendarUI = ({ events, onEventSave }) => {\r\n  const [selectedDate, setSelectedDate] = useState(null);\r\n  const [showEventForm, setShowEventForm] = useState(false);\r\n  const [selectedEvent, setSelectedEvent] = useState(null);\r\n\r\n  // Handle date change on calendar\r\n  const handleDateChange = (date) => {\r\n    setSelectedDate(date);\r\n    setSelectedEvent(null);  // Clear the selected event when date changes\r\n    setShowEventForm(true);  // Show the event form when a date is selected\r\n  };\r\n\r\n  // Get events for selected date\r\n  const getEventsForSelectedDate = (date) => {\r\n    return events.filter(event => new Date(event.date).toDateString() === new Date(date).toDateString());\r\n  };\r\n\r\n  // Handle saving the event\r\n  const handleSaveEvent = (eventData) => {\r\n    onEventSave(eventData);  // Save event data through parent function\r\n    setShowEventForm(false);  // Close form after saving\r\n  };\r\n \r\n\r\n  return (\r\n    <div className=\"calendar-ui\">\r\n      <h2>Event Calendar</h2>\r\n      <Calendar\r\n        onChange={handleDateChange}  // Update selected date\r\n        value={selectedDate}  // Set the selected date\r\n      />\r\n      <div className=\"event-list\">\r\n        {selectedDate && (\r\n          <>\r\n            <h3>Events for {selectedDate.toDateString()}</h3>\r\n            <ul>\r\n              {getEventsForSelectedDate(selectedDate).map(event => (\r\n                <li key={event.id}>\r\n                  <strong>{event.title}</strong>\r\n                  <p>{event.description}</p>\r\n                  <p>{event.time}</p>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </>\r\n        )}\r\n      </div>\r\n\r\n      {showEventForm && (\r\n        <EventForm\r\n          event={selectedEvent}  // Pass selected event (if editing)\r\n          onSave={handleSaveEvent}  // Handle save event\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CalendarUI;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}